# vector_db.py
import chromadb
import numpy as np
from .nlp_utils import blob_to_embedding

# --- CHROMA DB CLIENT ---
# We use PersistentClient so that the database is saved to disk.
# A folder named 'chroma_db' will be created in the root of your project.
try:
    client = chromadb.PersistentClient(path="chroma_db")
except Exception as e:
    print(f"Error al inicializar ChromaDB: {e}")
    client = None

# --- COLLECTION ---
# A collection is like a "table" for your vectors.
try:
    collection = client.get_or_create_collection(name="recursos_educativos")
except Exception as e:
    print(f"Error al obtener o crear la colección en ChromaDB: {e}")
    collection = None

def add_embedding(resource_id: int, embedding: np.ndarray, metadata: dict):
    """
    Adds an embedding and its metadata to the ChromaDB collection.
    
    Args:
        resource_id (int): The unique ID of the resource (from your SQLite database).
        embedding (np.ndarray): The embedding vector generated by the NLP model.
        metadata (dict): A dictionary with additional data (title, category, etc.).
    """
    if not collection:
        print("Error: La colección de ChromaDB no está disponible.")
        return
        
    try:
        # ChromaDB expects the embedding to be a list of floats, not a numpy array.
        embedding_list = embedding.tolist()
        
        # The ID must be a string.
        resource_id_str = str(resource_id)

        collection.add(
            embeddings=[embedding_list],
            metadatas=[metadata],
            ids=[resource_id_str]
        )
        print(f"Recurso {resource_id_str} añadido a ChromaDB.")
    except Exception as e:
        print(f"Error al añadir el embedding a ChromaDB para el recurso {resource_id}: {e}")

def query_similar(embedding: np.ndarray, top_k: int = 5) -> (list, list):
    """
    Searches for the 'top_k' most similar resources to a given embedding.

    Args:
        embedding (np.ndarray): The search query vector.
        top_k (int): The number of results to return.

    Returns:
        tuple: A tuple containing a list of resource IDs and a list of their similarity scores.
    """
    if not collection:
        print("Error: La colección de ChromaDB no está disponible.")
        return [], []

    try:
        embedding_list = embedding.tolist()
        results = collection.query(
            query_embeddings=[embedding_list],
            n_results=top_k
        )
        
        # We extract the IDs and 'distances' (Chroma uses distances, not direct cosine similarity)
        ids = results.get('ids', [[]])[0]
        distances = results.get('distances', [[]])[0]
        
        # The squared L2 distance (which Chroma uses by default) is 0 for identical vectors.
        # We convert it to a "similarity score" from 0 to 1 to show it to the user.
        # Similarity = 1 / (1 + Distance)
        scores = [1 / (1 + d) for d in distances]
        
        return ids, scores
    except Exception as e:
        print(f"Error al realizar la consulta en ChromaDB: {e}")
        return [], []
